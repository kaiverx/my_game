#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>
#include <memory>
#include <cmath>

// Класс стрелы
class Arrow {
public:
    Arrow(sf::Vector2f position, sf::Vector2f direction, float speed, const sf::Texture& texture)
        : direction(direction), speed(speed), expired(false)
    {
        sprite.setTexture(texture);
        sprite.setPosition(position);
        sprite.setScale(2.0f, 2.0f);
    }

    void update(sf::Time deltaTime) {
        sprite.move(direction * speed * deltaTime.asSeconds());
    }

    void draw(sf::RenderWindow& window) {
        window.draw(sprite);
    }

    sf::FloatRect getBounds() const {
        return sprite.getGlobalBounds();
    }

    void expire() {
        expired = true;
    }

    bool isExpired() const {
        return expired;
    }

private:
    sf::Sprite sprite;
    sf::Vector2f direction;
    float speed;
    bool expired;
};

// Класс стрелы игрока
class ArrowPlayer {
public:
    ArrowPlayer(sf::Vector2f position, sf::Vector2f direction, float speed, const sf::Texture& texture)
        : direction(direction), speed(speed), expired(false)
    {
        sprite.setTexture(texture);
        sprite.setPosition(position);
        sprite.setScale(2.0f, 2.0f);
    }

    void update(sf::Time deltaTime) {
        sprite.move(direction * speed * deltaTime.asSeconds());
    }

    void draw(sf::RenderWindow& window) {
        window.draw(sprite);
    }

    sf::FloatRect getBounds() const {
        return sprite.getGlobalBounds();
    }

    void expire() {
        expired = true;
    }

    bool isExpired() const {
        return expired;
    }

private:
    sf::Sprite sprite;
    sf::Vector2f direction;
    float speed;
    bool expired;
};

// Класс игрока
class Player {
public:
    Player(float speed, int health, int damage, float attackSpeed, const sf::Texture& texture, const sf::Texture& arrowTexture)
        : speed(speed), health(health), damage(damage), attackSpeed(attackSpeed), arrowTexture(arrowTexture)
    {
        sprite.setTexture(texture);
        sprite.setPosition(400.0f, 300.0f);
        sprite.setScale(2.0f, 2.0f);
    }

    void update(float deltaTime, const sf::RenderWindow& window, const std::vector<std::unique_ptr<Enemy>>& enemies) {
        if (health <= 0) {
            return;
        }

        sf::Vector2f movement(0.0f, 0.0f);

        if (sf::Keyboard::isKeyPressed(sf::Keyboard::W)) movement.y -= speed * deltaTime;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::S)) movement.y += speed * deltaTime;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::A)) movement.x -= speed * deltaTime;
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::D)) movement.x += speed * deltaTime;

        sprite.move(movement);

        if (sf::Mouse::isButtonPressed(sf::Mouse::Left) && attackClock.getElapsedTime().asSeconds() >= attackSpeed) {
            shootArrow(window);
            attackClock.restart();
        }

        for (auto& arrow : arrows) {
            arrow.update(sf::seconds(deltaTime));
            for (auto& enemy : enemies) {
                if (enemy->isAlive() && arrow.getBounds().intersects(enemy->getBounds())) {
                    enemy->takeDamage(damage);
                    arrow.expire();
                    break; // Если стрела попала, дальше её не проверяем
                }
            }
        }

        auto it = arrows.begin();
        while (it != arrows.end()) {
            if (it->isExpired()) {
                it = arrows.erase(it);
            }
            else {
                ++it;
            }
        }
    }

    void draw(sf::RenderWindow& window) {
        window.draw(sprite);
        for (auto& arrow : arrows) {
            arrow.draw(window);
        }
    }

    sf::FloatRect getBounds() const {
        return sprite.getGlobalBounds();
    }

    sf::Vector2f getPosition() const {
        return sprite.getPosition();
    }

    void takeDamage(int damage) {
        health -= damage;
        if (health <= 0) {
            std::cout << "Player is dead!" << std::endl;
        }
    }

    bool isAlive() const {
        return health > 0;
    }

    int getDamage() const {
        return damage;
    }

    std::vector<ArrowPlayer>& getArrows() {
        return arrows;
    }

private:
    float speed;
    int health;
    int damage;
    float attackSpeed;
    sf::Sprite sprite;
    sf::Texture arrowTexture;
    std::vector<ArrowPlayer> arrows;
    sf::Clock attackClock;

    void shootArrow(const sf::RenderWindow& window) {
        sf::Vector2f direction = window.mapPixelToCoords(sf::Mouse::getPosition(window)) - sprite.getPosition();
        float distance = std::hypot(direction.x, direction.y);
        direction /= distance;

        arrows.emplace_back(sprite.getPosition(), direction, 500.0f, arrowTexture);
    }
};

// Класс врага
class Enemy {
public:
    Enemy(float speed, int health, int damage, float attackSpeed, const sf::Texture& texture)
        : speed(speed), health(health), damage(damage), attackSpeed(attackSpeed), alive(true)
    {
        sprite.setTexture(texture);
        sprite.setPosition(100.0f, 100.0f);
        sprite.setScale(0.2f, 0.2f);
    }

    void update(sf::Time deltaTime, const sf::Vector2f& playerPosition) {
        if (!alive) return;

        sf::Vector2f direction = playerPosition - sprite.getPosition();
        float distance = std::hypot(direction.x, direction.y);
        direction /= distance;

        sprite.move(direction * speed * deltaTime.asSeconds());
    }

    void draw(sf::RenderWindow& window) {
        if (alive) {
            window.draw(sprite);
        }
    }

    sf::FloatRect getBounds() const {
        return sprite.getGlobalBounds();
    }

    sf::Vector2f getPosition() const {
        return sprite.getPosition();
    }

    void takeDamage(int damage) {
        health -= damage;
        if (health <= 0) {
            alive = false;
        }
    }

    bool isAlive() const {
        return alive;
    }

    void resolveCollisions(std::vector<std::unique_ptr<Enemy>>& enemies) {
        for (auto& enemy : enemies) {
            if (this != enemy.get() && sprite.getGlobalBounds().intersects(enemy->getBounds())) {
                sf::Vector2f direction = sprite.getPosition() - enemy->getPosition();
                float distance = std::hypot(direction.x, direction.y);
                if (distance != 0) {
                    direction /= distance;
                    sprite.move(direction * 0.5f);
                }
            }
        }
    }

private:
    float speed;
    int health;
    int damage;
    float attackSpeed;
    sf::Sprite sprite;
    bool alive;
};

// Класс лучника
class Archer {
public:
    Archer(float speed, int health, int damage, float range, float attackSpeed, const sf::Texture& texture, const sf::Texture& arrowTexture)
        : speed(speed), health(health), damage(damage), range(range), attackSpeed(attackSpeed), arrowTexture(arrowTexture), alive(true)
    {
        sprite.setTexture(texture);
        sprite.setPosition(100.0f, 100.0f);
        sprite.setScale(2.0f, 2.0f);
    }

    void update(sf::Time deltaTime, const sf::Vector2f& playerPosition) {
        if (!alive) return;

        sf::Vector2f direction = playerPosition - sprite.getPosition();
        float distance = std::hypot(direction.x, direction.y);

        if (distance > range) {
            direction /= distance;
            sprite.move(direction * speed * deltaTime.asSeconds());
        }
        else if (attackClock.getElapsedTime().asSeconds() >= attackSpeed) {
            shootArrow(playerPosition);
            attackClock.restart();
        }

        for (auto& arrow : arrows) {
            arrow.update(deltaTime);
        }

        auto it = arrows.begin();
        while (it != arrows.end()) {
            if (it->isExpired()) {
                it = arrows.erase(it);
            }
            else {
                ++it;
            }
        }
    }

    void draw(sf::RenderWindow& window) {
        if (alive) {
            window.draw(sprite);
            for (auto& arrow : arrows) {
                arrow.draw(window);
            }
        }
    }

    sf::FloatRect getBounds() const {
        return sprite.getGlobalBounds();
    }

    sf::Vector2f getPosition() const {
        return sprite.getPosition();
    }

    void takeDamage(int damage) {
        health -= damage;
        if (health <= 0) {
            alive = false;
        }
    }

    bool isAlive() const {
        return alive;
    }

    void checkArrowCollisions(Player& player, sf::RenderWindow& window) {
        auto it = arrows.begin();
        while (it != arrows.end()) {
            if (it->getBounds().intersects(player.getBounds())) {
                player.takeDamage(damage);
                it = arrows.erase(it);
            }
            else {
                ++it;
            }
        }
    }

    void resolveCollisions(std::vector<std::unique_ptr<Archer>>& archers) {
        for (auto& archer : archers) {
            if (this != archer.get() && sprite.getGlobalBounds().intersects(archer->getBounds())) {
                sf::Vector2f direction = sprite.getPosition() - archer->getPosition();
                float distance = std::hypot(direction.x, direction.y);
                if (distance != 0) {
                    direction /= distance;
                    sprite.move(direction * 0.5f);
                }
            }
        }
    }

private:
    float speed;
    int health;
    int damage;
    float range;
    float attackSpeed;
    sf::Sprite sprite;
    sf::Texture arrowTexture;
    std::vector<Arrow> arrows;
    sf::Clock attackClock;
    bool alive;

    void shootArrow(const sf::Vector2f& targetPosition) {
        sf::Vector2f direction = targetPosition - sprite.getPosition();
        float distance = std::hypot(direction.x, direction.y);
        direction /= distance;

        arrows.emplace_back(sprite.getPosition(), direction, 300.0f, arrowTexture);
    }
};

// класс для кнопок
class Button
{
public:
    // конструктор
    Button(const std::string& text, sf::Font& font, float x, float y)
    {
        button.setSize(sf::Vector2f(200.f, 50.0f)); // размер кнопки
        button.setPosition(x, y); // позиция 
        button.setFillColor(sf::Color::Blue); // цвет кнопки
        buttonText.setFont(font); // шрифт
        buttonText.setString(text); // установка текста на кнопке
        buttonText.setCharacterSize(24); // размер шрифта
        buttonText.setFillColor(sf::Color::White); // цвет текста
        buttonText.setPosition(x + (button.getSize().x - buttonText.getGlobalBounds().width) / 2, y + (button.getSize().y - buttonText.getGlobalBounds().height) / 2); // позиция текста
    }

    void draw(sf::RenderWindow& window) // метод для отрисовки кнопки
    {
        window.draw(button); // рисует прямоугольник
        window.draw(buttonText); // рисует текст
    }

    // проверка нажатия кнопки
    bool isClicked(sf::Vector2f mousePos)
    {
        return button.getGlobalBounds().contains(mousePos);
    }

private:
    sf::RectangleShape button; // прямоугольник который представляет кнопку
    sf::Text buttonText; // текст кнопки
};

int main() {
    sf::RenderWindow window(sf::VideoMode(800, 600), "Roguelike Game");

    sf::Font font;
    if (!font.loadFromFile("ComicSans.ttf")) {
        std::cerr << "Error loading font" << std::endl;
        return -1;
    }

    // Создаем кнопки с текстом, шрифтом и позициями
    Button newGameButton("New Game", font, 300.0f, 200.0f);
    Button settingButton("Settings", font, 300.0f, 300.0f);
    Button scoreBoardButton("Score Board", font, 300.0f, 400.0f);
    Button exitButton("Exit", font, 300.0f, 500.0f);
    Button backButton("Back", font, 300.0f, 500.0f);

    enum GameState { MENU, GAME, SETTINGS, EXIT, GAME_OVER };
    GameState gameState = MENU;

    // Загрузка текстур
    sf::Texture playerTexture, enemyTexture, archerTexture, arrowTexture;
    if (!playerTexture.loadFromFile("player.png") || !enemyTexture.loadFromFile("enemy.png") ||
        !archerTexture.loadFromFile("archer.png") || !arrowTexture.loadFromFile("arrow.png")) {
        std::cerr << "Failed to load one or more textures" << std::endl;
        return -1;
    }

    // Создание объектов игры
    Player player(200.0f, 100, 20, 0.5f, playerTexture, arrowTexture);
    std::vector<std::unique_ptr<Enemy>> enemies;
    std::vector<std::unique_ptr<Archer>> archers;
    enemies.emplace_back(std::make_unique<Enemy>(150.0f, 50, 5, 1.0f, enemyTexture));
    archers.emplace_back(std::make_unique<Archer>(75.0f, 30, 10, 200.0f, 1.0f, archerTexture, arrowTexture));

    int score = 0;
    sf::Clock gameClock;

    while (window.isOpen()) {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed) {
                window.close();
            }

            if (event.type == sf::Event::MouseButtonPressed) {
                sf::Vector2f mousePos = window.mapPixelToCoords(sf::Mouse::getPosition(window));
                switch (gameState) {
                case MENU:
                    if (newGameButton.isClicked(mousePos)) gameState = GAME;
                    if (settingButton.isClicked(mousePos)) gameState = SETTINGS;
                    if (exitButton.isClicked(mousePos)) window.close();
                    break;
                case SETTINGS:
                    if (backButton.isClicked(mousePos)) gameState = MENU;
                    break;
                case GAME_OVER:
                    if (backButton.isClicked(mousePos)) gameState = MENU;
                    break;
                default:
                    break;
                }
            }
        }

        window.clear(sf::Color::Black); // Задний фон окна

        float deltaTime = gameClock.restart().asSeconds();

        if (gameState == GAME) {
            player.update(deltaTime, window, enemies);

            for (auto& enemy : enemies) {
                enemy->update(sf::seconds(deltaTime), player.getPosition());
                enemy->resolveCollisions(enemies);
            }

            for (auto& archer : archers) {
                archer->update(sf::seconds(deltaTime), player.getPosition());
                archer->resolveCollisions(archers);
                archer->checkArrowCollisions(player, window);
            }

            // Отрисовка игровых объектов
            player.draw(window);
            for (auto& enemy : enemies) {
                if (enemy->isAlive()) enemy->draw(window);
            }
            for (auto& archer : archers) {
                if (archer->isAlive()) archer->draw(window);
            }

            // Отрисовка счета
            sf::Text scoreText;
            scoreText.setFont(font);
            scoreText.setString("Score: " + std::to_string(score));
            scoreText.setCharacterSize(24);
            scoreText.setFillColor(sf::Color::White);
            scoreText.setPosition(10.f, 10.f);
            window.draw(scoreText);
        }
        else if (gameState == MENU) {
            newGameButton.draw(window);
            settingButton.draw(window);
            scoreBoardButton.draw(window);
            exitButton.draw(window);
        }
        else if (gameState == SETTINGS || gameState == GAME_OVER) {
            backButton.draw(window);
        }

        window.display();
    }

    return 0;
}




 
